# Creates a user pool in cognito for your app to auth against
# This example requires MFA and validates the phone number to use as MFA
# Other fileds can be added to the schema
UserPool:
  Type: 'AWS::Cognito::UserPool'
  Properties:
    UserPoolName: ${self:custom.base}-userpool
    UserPoolAttributes:
      - phone_number
    Schema:
      - Name: name
        AttributeDataType: String
        Mutatble: true
        Required: false
      - Name: nickname
        AttributeDataType: String
        Mutatble: true
        Required: false

# Creates a User Pool Client to be used by identity pool
UserPoolClient:
  Type: 'AWS::Cognito::UserPoolClient'
  Properties:
    ClientName: ${self:custom.base}-client
    GenerateSecret: false
    UserPoolId:
      Ref: UserPool

# Creates a federated Identity Pool
IdentityPool:
  Type: 'AWS::Cognito::IdentityPool'
  Properties:
    IdentityPoolName: serverlessappsyncbackend2${self:provider.stage}identity
    AllowUnauthenticatedIdentities: true
    CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::GetAtt:
            - UserPool
            - ProviderName

# Create a role for unauthorizee access to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
CognitoUnAuthorizedRole:
  Type: 'AWS::IAM::Role'
  Properties:
    RoleName: { self:custom.role.cognito.unAuth.name }
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: 'Allow'
          Principal:
            Federated: 'cognito-identity.amazonaws.com'
          Action:
            - 'sts:AssumeRoleWithWebIdentity'
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud':
                Ref: IdentityPool
            # "ForAnyValue:StringLike":
            #    "cognito-identity.amazonaws.com:amr": unauthenticated
    Policies:
      - PolicyName: ${self:custom.role.cognito.unAuth.name}-Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 'mobileanalytics:PutEvents'
                - 'cognito-sync:*'
                - 'cognito-identity:*'
              Resource: '*'
            - Effect:
              Action:
                - appsync:GraphQL
              # TODO: replace apis/*/* with apis/<graphql_id/*
              Resource:
                - arn:aws:appsync:${self:provider.stage}:#{AWS::AccountId}:apis/*/types/Query/fields/getNote

# Create a role for authorizee access to AWS resources. Control what your user can access. Thos example only allows lambda invocation
# Only allows users in the previously created Identity Pool
CognitoAuthorizedRole:
  Type: 'AWS::IAM::Role'
  Properties:
    RoleName: { self:custom.role.cognito.auth.name }
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: 'Allow'
          Principal:
            Federated: 'cognito-identity.amazonaws.com'
          Action:
            - 'sts:AssumeRoleWithWebIdentity'
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud':
                Ref: IdentityPool
            # "ForAnyValue:StringLike":
            #    "cognito-identity.amazonaws.com:amr": authenticated
    Policies:
      - PolicyName: ${self:custom.role.cognito.auth.name}-Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 'mobileanalytics:PutEvents'
                - 'cognito-sync:*'
                - 'cognito-identity:*'
              Resource: '*'
            - Effect:
              Action:
                - appsync:GraphQL
              # TODO: replace apis/*/* with apis/<graphql_id/*
              Resource:
                - arn:aws:appsync:${self:provider.stage}:#{AWS::AccountId}:apis/*/*

# Assign the roles to the Identity Pool
IdentityPoolRoleMapping:
  Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
  Properties:
    IdentityPoolId:
      Ref: IdentityPool
    Roles:
      authenticated:
        Fn::GetAtt:
          - CognitoAuthorizedRole
          - Arn
      unauthorizee:
        Fn::GetAtt:
          - CognitoUnAuthorizedRole
          - Arn
